require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}],"pulse":[function(require,module,exports){
var pulseLibrary;

pulseLibrary = [];

exports.createPulse = function(parentLayer, posX, posY) {
  var blip, blips, i, j, k, len, point, pulse, pulse_blip;
  pulse = new Layer({
    width: 200,
    height: 200,
    superLayer: parentLayer,
    backgroundColor: "none",
    clip: false
  });
  if (posX && posY) {
    pulse.x = posX - (pulse.width / 2);
    pulse.y = posY - (pulse.height / 2);
  } else {
    pulse.center();
  }
  point = new Layer({
    superLayer: pulse,
    width: pulse.width / 10,
    height: pulse.height / 10,
    backgroundColor: "rgba(74,149,255,0.5)",
    borderRadius: pulse.width / 2
  });
  point.center();
  blips = [];
  for (i = j = 0; j <= 2; i = ++j) {
    pulse_blip = new Layer({
      superLayer: pulse,
      width: pulse.width,
      height: pulse.height,
      backgroundColor: "rgba(74,149,255,0.5)",
      borderRadius: pulse.width / 2,
      borderWidth: 1,
      scale: 0,
      opacity: 1,
      borderColor: "rgba(74,149,255,1)"
    });
    pulse_blip.center();
    blips.push(pulse_blip);
  }
  for (k = 0, len = blips.length; k < len; k++) {
    blip = blips[k];
    i = blip.index - 1;
    blip.animate({
      properties: {
        scale: 1,
        opacity: 0
      },
      time: 1 + (0.5 * i),
      delay: 2 - (0.5 * i),
      repeat: 1000
    });
  }
  return pulseLibrary.push(pulse);
};

exports.library = pulseLibrary;



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYXJyb25odW50L0Rlc2t0b3AvcHJldmlldy5mcmFtZXIvbW9kdWxlcy9teU1vZHVsZS5jb2ZmZWUiLCIvVXNlcnMvYXJyb25odW50L0Rlc2t0b3AvcHJldmlldy5mcmFtZXIvbW9kdWxlcy9wdWxzZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNJQSxPQUFPLENBQUMsS0FBUixHQUFnQixZQUFoQixDQUFBOztBQUFBLE9BRU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUEsR0FBQTtTQUNwQixLQUFBLENBQU0sdUJBQU4sRUFEb0I7QUFBQSxDQUZyQixDQUFBOztBQUFBLE9BS08sQ0FBQyxPQUFSLEdBQWtCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBTGxCLENBQUE7Ozs7O0FDZUEsSUFBQSxZQUFBOztBQUFBLFlBQUEsR0FBZSxFQUFmLENBQUE7O0FBQUEsT0FFTyxDQUFDLFdBQVIsR0FBc0IsU0FBQyxXQUFELEVBQWMsSUFBZCxFQUFvQixJQUFwQixHQUFBO0FBQ3JCLE1BQUEsbURBQUE7QUFBQSxFQUFBLEtBQUEsR0FBWSxJQUFBLEtBQUEsQ0FDWDtBQUFBLElBQUEsS0FBQSxFQUFPLEdBQVA7QUFBQSxJQUNBLE1BQUEsRUFBUSxHQURSO0FBQUEsSUFFQSxVQUFBLEVBQVksV0FGWjtBQUFBLElBR0EsZUFBQSxFQUFpQixNQUhqQjtBQUFBLElBSUEsSUFBQSxFQUFNLEtBSk47R0FEVyxDQUFaLENBQUE7QUFPQSxFQUFBLElBQUcsSUFBQSxJQUFRLElBQVg7QUFDRSxJQUFBLEtBQUssQ0FBQyxDQUFOLEdBQVUsSUFBQSxHQUFLLENBQUMsS0FBSyxDQUFDLEtBQU4sR0FBWSxDQUFiLENBQWYsQ0FBQTtBQUFBLElBQ0EsS0FBSyxDQUFDLENBQU4sR0FBVSxJQUFBLEdBQUssQ0FBQyxLQUFLLENBQUMsTUFBTixHQUFhLENBQWQsQ0FEZixDQURGO0dBQUEsTUFBQTtBQUlDLElBQUEsS0FBSyxDQUFDLE1BQU4sQ0FBQSxDQUFBLENBSkQ7R0FQQTtBQUFBLEVBYUEsS0FBQSxHQUFZLElBQUEsS0FBQSxDQUNYO0FBQUEsSUFBQSxVQUFBLEVBQVksS0FBWjtBQUFBLElBQ0EsS0FBQSxFQUFPLEtBQUssQ0FBQyxLQUFOLEdBQVksRUFEbkI7QUFBQSxJQUVBLE1BQUEsRUFBUSxLQUFLLENBQUMsTUFBTixHQUFhLEVBRnJCO0FBQUEsSUFHQSxlQUFBLEVBQWlCLHNCQUhqQjtBQUFBLElBSUEsWUFBQSxFQUFjLEtBQUssQ0FBQyxLQUFOLEdBQVksQ0FKMUI7R0FEVyxDQWJaLENBQUE7QUFBQSxFQW1CQSxLQUFLLENBQUMsTUFBTixDQUFBLENBbkJBLENBQUE7QUFBQSxFQXFCQSxLQUFBLEdBQVEsRUFyQlIsQ0FBQTtBQXNCQSxPQUFTLDBCQUFULEdBQUE7QUFDQyxJQUFBLFVBQUEsR0FBaUIsSUFBQSxLQUFBLENBQ2hCO0FBQUEsTUFBQSxVQUFBLEVBQVksS0FBWjtBQUFBLE1BQ0EsS0FBQSxFQUFPLEtBQUssQ0FBQyxLQURiO0FBQUEsTUFFQSxNQUFBLEVBQVEsS0FBSyxDQUFDLE1BRmQ7QUFBQSxNQUdBLGVBQUEsRUFBaUIsc0JBSGpCO0FBQUEsTUFJQSxZQUFBLEVBQWMsS0FBSyxDQUFDLEtBQU4sR0FBWSxDQUoxQjtBQUFBLE1BS0EsV0FBQSxFQUFhLENBTGI7QUFBQSxNQU1BLEtBQUEsRUFBTyxDQU5QO0FBQUEsTUFPQSxPQUFBLEVBQVMsQ0FQVDtBQUFBLE1BUUEsV0FBQSxFQUFhLG9CQVJiO0tBRGdCLENBQWpCLENBQUE7QUFBQSxJQVVBLFVBQVUsQ0FBQyxNQUFYLENBQUEsQ0FWQSxDQUFBO0FBQUEsSUFXQSxLQUFLLENBQUMsSUFBTixDQUFXLFVBQVgsQ0FYQSxDQUREO0FBQUEsR0F0QkE7QUFvQ0EsT0FBQSx1Q0FBQTtvQkFBQTtBQUNDLElBQUEsQ0FBQSxHQUFJLElBQUksQ0FBQyxLQUFMLEdBQVcsQ0FBZixDQUFBO0FBQUEsSUFDQSxJQUFJLENBQUMsT0FBTCxDQUFhO0FBQUEsTUFDWixVQUFBLEVBQVk7QUFBQSxRQUFBLEtBQUEsRUFBTyxDQUFQO0FBQUEsUUFBVSxPQUFBLEVBQVMsQ0FBbkI7T0FEQTtBQUFBLE1BRVosSUFBQSxFQUFNLENBQUEsR0FBRSxDQUFDLEdBQUEsR0FBSSxDQUFMLENBRkk7QUFBQSxNQUdaLEtBQUEsRUFBTyxDQUFBLEdBQUUsQ0FBQyxHQUFBLEdBQUksQ0FBTCxDQUhHO0FBQUEsTUFJWixNQUFBLEVBQVEsSUFKSTtLQUFiLENBREEsQ0FERDtBQUFBLEdBcENBO1NBNkNBLFlBQVksQ0FBQyxJQUFiLENBQWtCLEtBQWxCLEVBOUNxQjtBQUFBLENBRnRCLENBQUE7O0FBQUEsT0FrRE8sQ0FBQyxPQUFSLEdBQWtCLFlBbERsQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMgQWRkIHRoZSBmb2xsb3dpbmcgbGluZSB0byB5b3VyIHByb2plY3QgaW4gRnJhbWVyIFN0dWRpby4gXG4jIG15TW9kdWxlID0gcmVxdWlyZSBcIm15TW9kdWxlXCJcbiMgUmVmZXJlbmNlIHRoZSBjb250ZW50cyBieSBuYW1lLCBsaWtlIG15TW9kdWxlLm15RnVuY3Rpb24oKSBvciBteU1vZHVsZS5teVZhclxuXG5leHBvcnRzLm15VmFyID0gXCJteVZhcmlhYmxlXCJcblxuZXhwb3J0cy5teUZ1bmN0aW9uID0gLT5cblx0cHJpbnQgXCJteUZ1bmN0aW9uIGlzIHJ1bm5pbmdcIlxuXG5leHBvcnRzLm15QXJyYXkgPSBbMSwgMiwgM10iLCIjXG4jXG4jIEF1dGhvcjpcbiNcdEFycm9uIEh1bnRcbiNcdGh0dHA6Ly9hcnJvbmh1bnQuY29tXG4jXG4jIFVzYWdlOlxuI1x0VG8gdXNlIHRoZSBwdWxzZSBtb2R1bGUsIHNpbXBseSBpbXBvcnQgdGhlIG1vZHVsZSBhbmQgY2FsbCBpdCB3aXRoIHRoZSBjcmVhdGVQdWxzZSgpIGZ1bmN0aW9uXG4jXG4jXHRwdWxzZSA9IHJlcXVpcmUgXCJwdWxzZVwiXG4jXHRwdWxzZS5jcmVhdGVQdWxzZShwYXJlbnRMYXllciwgeCwgeSlcbiNcbiNcdEVhY2ggcHVsc2UgZ2V0cyBwdXNoZWQgaW50byB0aGUgcHVsc2VMaWJyYXJ5IGFycmF5LCBzbyB5b3UgY2FuIHJlZmVyZW5jZSB0aGVtIGxhdGVyXG4jXG4jXHRwdWxzZS5saWJyYXJ5WzBdLm9uIEV2ZW50cy5DbGljaywgLT5cbiNcdFx0IyBEbyBzdHVmZlxuI1xuI1xuXG5wdWxzZUxpYnJhcnkgPSBbXVxuXG5leHBvcnRzLmNyZWF0ZVB1bHNlID0gKHBhcmVudExheWVyLCBwb3NYLCBwb3NZKSAtPlxuXHRwdWxzZSA9IG5ldyBMYXllclxuXHRcdHdpZHRoOiAyMDBcblx0XHRoZWlnaHQ6IDIwMFxuXHRcdHN1cGVyTGF5ZXI6IHBhcmVudExheWVyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcIm5vbmVcIlxuXHRcdGNsaXA6IGZhbHNlXG5cblx0aWYocG9zWCAmJiBwb3NZKVxuXHRcdFx0cHVsc2UueCA9IHBvc1gtKHB1bHNlLndpZHRoLzIpXG5cdFx0XHRwdWxzZS55ID0gcG9zWS0ocHVsc2UuaGVpZ2h0LzIpXG5cdGVsc2Vcblx0XHRwdWxzZS5jZW50ZXIoKVxuXG5cdHBvaW50ID0gbmV3IExheWVyXG5cdFx0c3VwZXJMYXllcjogcHVsc2Vcblx0XHR3aWR0aDogcHVsc2Uud2lkdGgvMTBcblx0XHRoZWlnaHQ6IHB1bHNlLmhlaWdodC8xMFxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDc0LDE0OSwyNTUsMC41KVwiXG5cdFx0Ym9yZGVyUmFkaXVzOiBwdWxzZS53aWR0aC8yXG5cdHBvaW50LmNlbnRlcigpXG5cblx0YmxpcHMgPSBbXVxuXHRmb3IgaSBpbiBbMC4uMl1cblx0XHRwdWxzZV9ibGlwID0gbmV3IExheWVyXG5cdFx0XHRzdXBlckxheWVyOiBwdWxzZVxuXHRcdFx0d2lkdGg6IHB1bHNlLndpZHRoXG5cdFx0XHRoZWlnaHQ6IHB1bHNlLmhlaWdodFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBcInJnYmEoNzQsMTQ5LDI1NSwwLjUpXCJcblx0XHRcdGJvcmRlclJhZGl1czogcHVsc2Uud2lkdGgvMlxuXHRcdFx0Ym9yZGVyV2lkdGg6IDFcblx0XHRcdHNjYWxlOiAwXG5cdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRib3JkZXJDb2xvcjogXCJyZ2JhKDc0LDE0OSwyNTUsMSlcIlxuXHRcdHB1bHNlX2JsaXAuY2VudGVyKClcblx0XHRibGlwcy5wdXNoKHB1bHNlX2JsaXApXG5cblx0Zm9yIGJsaXAgaW4gYmxpcHNcblx0XHRpID0gYmxpcC5pbmRleC0xXG5cdFx0YmxpcC5hbmltYXRlKHtcblx0XHRcdHByb3BlcnRpZXM6IHNjYWxlOiAxLCBvcGFjaXR5OiAwXG5cdFx0XHR0aW1lOiAxKygwLjUqaSlcblx0XHRcdGRlbGF5OiAyLSgwLjUqaSlcblx0XHRcdHJlcGVhdDogMTAwMFxuXHRcdH0pXG5cblx0cHVsc2VMaWJyYXJ5LnB1c2gocHVsc2UpXG5cbmV4cG9ydHMubGlicmFyeSA9IHB1bHNlTGlicmFyeVxuIl19
